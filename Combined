
**Week 2 Do File
* Intro to Time-Series Data in STATA

*Imports CSV into Stata
import delimited "C:\Users\Peter\Dropbox\Further Econometrics\workshops\lecture1eg.csv"

*Date Formatting
gen day = date(year, "MDY", 2000)
*Creates new variable day based on date string - Date function converts specified date format (MDY = Month-Day-Year) to a Stata-recognisable date format.
 
format day %td 
*format day %td: Formats day as a Stata time-series date variable (%td).

gen year1 = year(day) 
*gen year1 = year(day): Creates a new variable year1 extracting the year from day.


* Alternative time variable - Defines a time variable starting from 1947 and incrementing by 1 for each observation. _n is the observation number, so this line produces a sequence for time indexing.
generate time = 1947+_n-1


tsset time, yearly  
*Specifies time as the time variable for the dataset, informing Stata this is yearly time-series data. This enables Stata's time-series commands and functions.


*Basic time-series plot
tsline consumption
*Plots the time series for the consumption variable over time.

*Enhanced Plot with Titles
twoway (tsline consumption), ytitle(Consumption) ttitle(Time) ///
title(US Consumption (1947 - 2000))
*Creates a time-series line plot for consumption with axis titles and a main title, displaying "US Consumption (1947 - 2000)."

*Comparative Plot
twoway (tsline consumption) (tsline dpi), ytitle(Consumption Income) ttitle(Time) ///
title(US Consumption and Income (1947-2000))
*Plots both consumption and dpi variables on the same chart, with titles for easier interpretation


*Lag and Lead Generation for Time-Series
gen consumpl1 = L.consumption
gen consumpl2 = L2.consumption
gen consumpf1 = F.consumption
gen consumpf2 = F2.consumption
*L. = Lag by x period, F. = Lag by x period

*Differencing for time-series analysis
gen dconsump = d.consumption
gen d2consump = d2.consumption

*First-difference plot
twoway (tsline d.consumption), ytitle(First Difference of Consumption) ///
ttitle(Time)title(US First Difference Consumption Function (1948 - 2000))
*Plots the first difference in consumption over time, with relevant titles for easier interpretation.

twoway (tsline d.consumption) (tsline d.dpi), ytitle(Consumption Income) ttitle(Time) ///
title(US First Difference Consumption and First Difference Income (1948-2000))

*Regression of log-transformed variables
gen lnconsump = log(consumption)
gen lndpi = log(dpi)
regress lnconsump lndpi


*Residual calculation and plotting
predict res, residuals
twoway (scatter res time), ytitle(residuals) ttitle(Time) ///
title(Residuals from Static Regression Model)
*predict res, residuals: Computes residuals from the previous regression.
*Plots residuals against time to check for patterns or trends.

*Autoregressive (AR) Model Estimation
regress res L1.res
regress res L1.res, noconstant
*Estimates an AR(1) model for res, testing for autocorrelation with and without a constant term.



* Scatterplot for residuals
twoway (scatter res L1.res), ytitle(residuals) title(First lag of residuals) ///
title (Residuals against First Lag of Residuals - Static Model)
*Plots residuals against their first lag to visually assess the correlation between residuals over time.

Durbin-Watson Test for Autocorrelation
regress lnconsump lndpi
estat dwatson
*Re-runs the initial regression.
*estat dwatson: Executes the Durbin-Watson test to assess autocorrelation in residuals.


*Dynamic Model with Lagged Variables
regress lnconsump lndpi L.lndpi L.lnconsump
testparm L.lndpi L.lnconsump
*Regresses lnconsump on lndpi, its lag (L.lndpi), and its own lag (L.lnconsump).
*testparm L.lndpi L.lnconsump: Conducts a joint significance test on the lagged variables.



*Breusch-Godfrey Test for Autocorrelation
estat bgodfrey
estat bgodfrey, nomiss0
*Performs the Breusch-Godfrey test for autocorrelation, which is suitable when lagged dependent variables are in the model.


**Week 3 Do File
use "C:\Users\dawso\Downloads\simulated data.dta" 

* Inform STATA of time-series data
tsset timevar
*Sets the dataset as time-series data with timevar as the time variable, enabling time-series functions and lags

*Plotting time-series Y1
twoway (tsline y1)
*Plots a time-series line graph of y1.

* Simple AR(1) model for Y1
regress y1 L.y1

* Hypothesis test for AR(1) Coefficient of y1
test L.y1=1
*Tests if the coefficient of the first lag of y1 equals 1, indicating if y1 is non-stationary.


* Repeating AR(1) Models and Hypothesis Tests for y2,y3,y4,y5

twoway (tsline y2)
regress y2 L.y2
test L.y2=1

twoway (tsline y4)
regress y4 L.y4
test L.y4=1

twoway (tsline y5)
regress y5 L.y5
test L.y5=1

twoway (tsline y3)
regress y3 L.y3
test L.y3=1

*This pattern is repeated for y2, y3, y4, and y5 to visualize each time series, fit AR(1) models, and test for non-stationarity by checking if the AR coefficient equals 1.


*Dickey-Fuller Test for Non-Stationarity of y1
regress D.y1 L.y1
dfuller y1, regress lags(0)
*First, fits a regression for D.y1 (the difference of y1) on its lagged level to check for stationarity.
*Then uses dfuller, a built-in function for Dickey-Fuller tests, specifying zero lags for simplicity.

* Augmented Dickey-Fuller (ADF) model

display 12*(500/100)^0.25
regress D.y1 L.y1 L(1/18).D.y1
regress D.y1 L.y1 L(1/18).D.y1, noconstant
dfuller y1, noconstant regress lags(18)
*display calculates the maximum lag length based on a sample size (500) using an empirical rule.
*Regressions fit D.y1 on lagged values of y1 and differences up to 18 lags, with and without a constant term.
*The dfuller command tests y1 for stationarity using an ADF test with 18 lags and no constant term.
*This regression includes a constant by default, which means Stata will estimate an intercept for the model
*Second line (regress D.y1 L.y1 L(1/18).D.y1, noconstant): Adding the noconstant option removes the intercept from the model, forcing the regression line to go through the origin

*Repeating ADF test for y2
twoway (tsline y2)
dfuller y2, regress lags(18)
dfuller y2, regress lags(17)
dfuller y2, regress lags(16)
dfuller y2, regress lags(15)
dfuller y2, regress lags(14)
dfuller y2, regress lags(13)
dfuller y2, regress lags(12)
dfuller y2, regress lags(11)
dfuller y2, regress lags(10)
dfuller y2, regress lags(9)
dfuller y2, regress lags(8)
dfuller y2, regress lags(7)
dfuller y2, regress lags(6)
dfuller y2, regress lags(5)
dfuller y2, regress lags(4)
dfuller y2, regress lags(3)
dfuller y2, regress lags(2)
dfuller y2, regress lags(1)
dfuller y2, regress lags(0)
*Plots and performs ADF tests on y2 with varying lengths to determine optimal lags. 

*Augmented Dickey-Fuller for y4 with Trend Component
twoway (tsline y4)
regress D.y4 timevar L.y4 L(1/18).D.y4
regress D.y4 L.y4 L(1/18).D.y4
regress D.y4 L.y4 L(1/17).D.y4
regress D.y4 L.y4 L(1/16).D.y4
regress D.y4 L.y4 L(1/15).D.y4
regress D.y4 L.y4 L(1/14).D.y4
regress D.y4 L.y4 L(1/13).D.y4
regress D.y4 L.y4 L(1/12).D.y4
regress D.y4 L.y4 L(1/11).D.y4
regress D.y4 L.y4 L(1/10).D.y4
regress D.y4 L.y4 L(1/9).D.y4
regress D.y4 L.y4 L(1/8).D.y4
regress D.y4 L.y4 L(1/7).D.y4
regress D.y4 L.y4 L(1/6).D.y4
regress D.y4 L.y4 L(1/5).D.y4
regress D.y4 L.y4 L(1/4).D.y4
regress D.y4 L.y4 L(1/3).D.y4
regress D.y4 L.y4 L(1/2).D.y4
regress D.y4 L.y4 L.D.y4
regress D.y4 L.y4
dfuller y4, regress lags(0)
dfuller y4, regress lags(0) noconstant
*Similar steps as y1, adding time trend in regressions plotting y4. 

*Trend analysis and stationarity test for y5
twoway (tsline y5)
regress D.y5 timevar L.y5 L(1/18).D.y5
regress D.y5 timevar L.y5 L(1/17).D.y5
regress D.y5 timevar L.y5 L(1/16).D.y5
regress D.y5 timevar L.y5 L(1/15).D.y5
regress D.y5 timevar L.y5 L(1/14).D.y5
regress D.y5 timevar L.y5 L(1/13).D.y5
regress D.y5 timevar L.y5 L(1/12).D.y5
regress D.y5 timevar L.y5 L(1/11).D.y5
regress D.y5 timevar L.y5 L(1/10).D.y5
regress D.y5 timevar L.y5 L(1/9).D.y5
dfuller y5, trend regress lags(9)
*Tests y5 for trend stationarity by including a time trend and fitting regressions at various lag levels.

* Regressing y5 residuals for stationarity
regress y5 timevar
predict res5, residual
twoway (tsline res5)
regress D.res5 L.res5 L(1/18).D.res5
regress D.res5 L.res5 L(1/17).D.res5
regress D.res5 L.res5 L(1/16).D.res5
regress D.res5 L.res5 L(1/15).D.res5
regress D.res5 L.res5 L(1/14).D.res5
regress D.res5 L.res5 L(1/13).D.res5
regress D.res5 L.res5 L(1/12).D.res5
regress D.res5 L.res5 L(1/11).D.res5
regress D.res5 L.res5 L(1/10).D.res5
regress D.res5 L.res5 L(1/9).D.res5
regress D.res5 L.res5 L(1/9).D.res5, noconstant
dfuller res5, regress lags(9)
dfuller res5, noconstant regress lags(9)
*Regresses y5 on time, obtaining residuals to remove the trend; performs stationarity tests on these residuals

*Trend analysis and stationarity test for y3
twoway (tsline y3)
regress D.y3 timevar L.y3 L(1/18).D.y3
regress D.y3 timevar L.y3 L(1/17).D.y3
regress D.y3 timevar L.y3 L(1/16).D.y3
regress D.y3 timevar L.y3 L(1/15).D.y3
regress D.y3 timevar L.y3 L(1/14).D.y3
dfuller y3, trend regress lags(14)
*Similar steps for y3

regress y3 timevar
predict res3, residual
twoway (tsline res3)
regress D.res3 L.res3 L(1/18).D.res3
regress D.res3 L.res3 L(1/17).D.res3
regress D.res3 L.res3 L(1/16).D.res3
regress D.res3 L.res3 L(1/15).D.res3
regress D.res3 L.res3 L(1/14).D.res3

dfuller res3, regress lags(14)

**Week 4 Do File
*Imports CSV file containing data into Stata
import delimited "C:\Users\dawso\OneDrive\Desktop\ECO-6003A\STATA Workshops\Workshop 4\workshop4.csv"

* Generate monthly variable and set time-series data

gen monthly = tm(2006m1)+_n-1
format monthly %tm
tsset monthly
*Creates a monthly time variable starting from January 2006 and increments by 1 for each observation.
*Formats monthly as a time variable in a monthly format.
*Sets the data as time-series data using monthly as the time variable

* Time series plot of UK CPI
twoway (tsline ukcpi), ytitle(UKCPI) ttitle(Month) ///
 title(UK Monthly Consumer Price Index 2006 - 2015)
*Plots the time series of ukcpi, the UK Consumer Price Index, from 2006 to 2015 with custom titles for the y-axis and overall graph.

* Create logarithmic variable
gen lnukcpi = log(ukcpi) 
*Generates new variable lnukcpi, which is natural logarithm of ukcpi

*Generate time trend variable
gen time = _n
 
*Calculate Maximum Lag Length Using Schwert’s Rule
display 12*(116/100)^0.25
*Calculates the maximum lag length (13) based on the sample size (116) using Schwert's formula, which helps in determining the optimal number of lags for stationarity tests.


*Testing for unit root using sequential t-test
regress D.lnukcpi L.lnukcpi L(1/13).D.lnukcpi time 
*Regresses the differenced lnukcpi on its lagged level, 13 lags of the differenced lnukcpi, and a time trend. This regression is used to test for a unit root in lnukcpi

*Using loop to automate regressions with varying lag lengths
forvalues lags = 8/13 {
				eststo m`lags': regress D.lnukcpi L.lnukcpi L(1/`lags').D.lnukcpi time
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
*Runs regressions with varying lag lengths (from 8 to 13) and stores each model.
*Uses esttab to display the results with BIC, AIC statistics, and significance stars.

*Repeating Regressions with Fewer Lags (1 to 7)
forvalues lags = 1/7 {
				eststo m`lags': regress D.lnukcpi L.lnukcpi L(1/`lags').D.lnukcpi time
				}
				esttab m1 m2 m3 m4 m5 m6 m7, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
*Runs regressions with lag lengths from 1 to 7 and displays results similarly
						
*Automated Dickey-Fuller Test (ADF) with and without trend
dfuller lnukcpi, trend regress lags(13)
dfuller lnukcpi, trend regress lags(12)   
dfuller lnukcpi, regress lags(13)
dfuller lnukcpi, regress lags(12)
*Performs ADF tests on lnukcpi with and without a trend using specified lag lengths.


* Testing for stationarity in first difference form
twoway (tsline D.ukcpi), ytitle(D.UKCPI) ttitle(Month) ///
 title(First Difference of UK Monthly Consumer Price Index 2006 - 2015)
*Plots the first differenced ukcpi to check for stationarity visually.

*First-Difference Stationarity Test with Varying Lags (8 to 13)
forvalues lags = 8/13 {
				eststo m`lags': regress D2.lnukcpi L.D.lnukcpi L(1/`lags').D2.lnukcpi
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
*Regresses the second difference of lnukcpi on the lagged first difference with varying lag lengths (from 8 to 13) to test for stationarity.

*ADF test on First Difference
dfuller D.lnukcpi, regress lags(13)
*Performs ADF test on first difference of lnukcpi with 13 lags

* Testing for stationarity in second difference form
forvalues lags = 8/13 {
				eststo m`lags': regress D3.lnukcpi L.D2.lnukcpi L(1/`lags').D3.lnukcpi
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
*Regresses third difference of lnukcpi on lagged second differenece with lags from 8 to 13.


forvalues lags = 1/7 {
				eststo m`lags': regress D3.lnukcpi L.D2.lnukcpi L(1/`lags').D3.lnukcpi
				}
				esttab m1 m2 m3 m4 m5 m6, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)				
				
dfuller D2.lnukcpi, regress lags(10)

*******************************************************************************
* 
* Time-Series Plot of Consumer Sentiment Index (CSI)
twoway (tsline csi), ytitle(CSI) ttitle(Month) ///
 title(Consumer Sentiment Index 2006 - 2015)
*Plots csi (consumer sentiment index) from 2006 to 2015.  
 forvalues lags = 8/13 {
				eststo m`lags': regress D.csi L.csi L(1/`lags').D.csi time
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
				
forvalues lags = 1/7 {
				eststo m`lags': regress D.csi L.csi L(1/`lags').D.csi time
				}
				esttab m1 m2 m3 m4 m5 m6 m7, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
			
				
* ADF test on CSI
dfuller csi, trend regress lags(0)
dfuller csi, regress lags(0)
*Performs ADF tests on CSI with and without trend

* Testing for stationarity in first difference for CSI
twoway (tsline D.csi), ytitle(D.CSI) ttitle(Month) ///
 title(First Difference of Consumer Sentiment Index 2006 - 2015)
*Plots first differenced CSI to check for stationarity

*Olympic Participation Variable Stationarity Tests
forvalues lags = 8/13 {
				eststo m`lags': regress D2.csi L.D.csi L(1/`lags').D2.csi
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
*Runs regressions on olympic2 to test for stationarity with a time trend.


forvalues lags = 1/7 {
				eststo m`lags': regress D2.csi L.D.csi L(1/`lags').D2.csi
				}
				esttab m1 m2 m3 m4 m5 m6 m7, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
							
dfuller D.csi, regress lags(0)

*******************************************************************************
* olympic2

forvalues lags = 8/13 {
				eststo m`lags': regress D.olympic2 L.olympic2 L(1/`lags').D.olympic2 time
				}
				esttab m8 m9 m10 m11 m12 m13, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
				
forvalues lags = 1/7 {
				eststo m`lags': regress D.olympic2 L.olympic2 L(1/`lags').D.olympic2 time
				}
				esttab m1 m2 m3 m4 m5 m6 m7, stats(bic aic) star(* 0.1 ** 0.05 *** 0.01)
	
	
dfuller olympic2, trend regress lags(0)


* Time series plot
twoway (tsline olympic2), ytitle(Olympic Inspiration) ttitle(Month) ///
 title(Olympics Inspiring Participation 2006 - 2016)

*Splitting sample for pre- and post-break period

dfuller olympic2 in 1/79, regress lags(12)
dfuller olympic2 in 1/79, regress lags(0)

* Post-break period, result less sensitive to chosen lag length

dfuller olympic2 in 80/123, regress lags(6)
dfuller olympic2 in 80/123, regress lags(5)
dfuller olympic2 in 80/123, regress lags(0)

*Tests olympic2 for stationarity in pre- and post-break periods with specified lags.

*******************************************************************************

* DF-GLS tests for stationarity

dfgls lnukcpi
dfgls D.lnukcpi
dfgls D2.lnukcpi
*Uses DF-GLS (Dickey-Fuller GLS) tests for enhanced stationarity testing on various transformations of lnukcpi.

dfgls csi
dfgls D.csi

dfgls olympic2
dfgls D.olympic2

dfgls olympic2 in 1/79
dfgls olympic2 in 80/123

dfgls D.olympic2 in 1/79
dfgls D.olympic2 in 80/123 

**Week 5 Do File
*Create monthly time variable and set time-series data
gen monthly = tm(1989m1)+_n-1
format monthly %tm
tsset monthly
*Creates a new time variable monthly, starting from January 1989 and incrementing by 1 for each observation.
*Formats monthly as a time variable in a monthly format.
*Sets the data as time-series data using monthly as the time variable.


* Restrict sample period for plotting
twoway (tsline unleaded diesel in 261/321), ytitle(Price of Unleaded Petrol and ///
Diesel) ttitle(Month) /// 
title(Price of Unleaded Petrol and Diesel Sept 2010 to Sept 2015)
*Plots the time series of unleaded and diesel prices between observations 261 and 321, corresponding to the period September 2010 to September 2015.
Adds custom titles for the y-axis, t-axis, and the overall graph.

* Create logarithmic variables
gen lnunleaded = log(unleaded)
gen lndiesel = log(diesel)
gen lncrude = log(crude)
*Generates new variables lnunleaded, lndiesel, and lncrude as the natural logarithms of unleaded, diesel, and crude, respectively. This transformation helps linearize exponential growth trends and stabilize variance for econometric analysis
* ADF tests
*Here, the instructions indicate performing Augmented Dickey-Fuller (ADF) tests for each variable (lnunleaded, lndiesel, and lncrude) to determine if they are stationary or if they need to be differenced to become stationary (I(1) processes). This is done over restricted time periods.

* Maximum lag length (Schwert formula)
display 12*(61/100)^0.25
							
* Cointegrating regression
regress lnunleaded lndiesel in 261/321
predict resa in 261/321, residuals
*Regresses lnunleaded on lndiesel over the sample period from observation 261 to 321, representing September 2010 to September 2015.
*Saves the residuals from this regression as resa to test if there is a stationary linear relationship (cointegration) between the two variables.

*Run Sequential Regressions on Residuals
forvalues lags = 6/11 {
				eststo m`lags': regress D.resa L.resa L(1/`lags').D.resa in 261/321
				}
				esttab m6 m7 m8 m9 m10 m11
*Runs regressions of the differenced residuals (D.resa) on their lagged levels and lagged differences from 6 to 11 lags, to test the residuals’ stationarity over the selected period.
*Stores the results for comparison.

*Additional Regressions with Fewer Lags
forvalues lags = 1/5 {
				eststo m`lags': regress D.resa L.resa L(1/`lags').D.resa in 261/321
				}
				esttab m1 m2 m3 m4 m5				
				
Automated Dickey-Fuller Test on Residuals
dfuller resa, noconstant regress lags(5)
*Performs the Dickey-Fuller test on resa with 5 lags and without a constant. This is to determine if the residuals from the cointegration regression are stationary, suggesting a cointegrating relationship.

*Cointegration Test with Correct Critical Values Using egranger Command
egranger lnunleaded lndiesel in 261/321, lags(5) regress
*Runs the Engle-Granger cointegration test on lnunleaded and lndiesel with 5 lags over the restricted period, using correct critical values for a more accurate determination of cointegration.



* Cointegrating Regression between lnunleaded and lncrude (Part (aii))

twoway (tsline unleaded crude in 260/320), ytitle(Price of Unleaded Petrol and ///
Crude Oil) ttitle(Month) /// 
title(Price of Unleaded Petrol and Crude Oil Aug 2010 to Aug 2015)

*Plots the prices of unleaded and crude over the period August 2010 to August 2015 to visualize their relationship.
stata

regress lnunleaded lncrude in 260/320
predict resb in 260/320, residuals
*Regresses lnunleaded on lncrude over the selected period and saves the residuals as resb for cointegration testing.

*ADF test on residuals resb for cointegration between lnunleaded and lncrude
forvalues lags = 6/11 {
				eststo m`lags': regress D.resb L.resb L(1/`lags').D.resb in 260/320
				}
				esttab m6 m7 m8 m9 m10 m11
*Runs regressions of the differenced residuals (D.resb) on their lagged levels and lagged differences from 6 to 11 lags, to determine if lnunleaded and lncrude are cointegrated.

forvalues lags = 1/5 {
				eststo m`lags': regress D.resb L.resb L(1/`lags').D.resb in 260/320
				}
				esttab m1 m2 m3 m4 m5
				
				
dfuller resb, noconstant regress lags(0)

*Engle-Granger Test with egranger for Correct Critical Values
egranger lnunleaded lncrude in 260/320, lags(0) regress
*Uses egranger to test cointegration between lnunleaded and lncrude with correct critical values.

*Error Correction Model (ECM) for Cointegrated Series (lnunleaded and lndiesel)

regress D.lnunleaded D.lndiesel L(1/11).D.lnunleaded L(1/11).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/10).D.lnunleaded L(1/10).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/9).D.lnunleaded L(1/9).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/8).D.lnunleaded L(1/8).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/7).D.lnunleaded L(1/7).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/6).D.lnunleaded L(1/6).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/5).D.lnunleaded L(1/5).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/4).D.lnunleaded L(1/4).D.lndiesel L.resa in 261/321
regress D.lnunleaded D.lndiesel L(1/3).D.lnunleaded L(1/3).D.lndiesel L.resa in 261/321
*Runs an ECM by regressing D.lnunleaded on D.lndiesel, 11 lags of each differenced variable, and the lagged error term L.resa to capture the long-run equilibrium adjustment process between lnunleaded and lndiesel.

**Week 6 Do File
*Creating monthly time variable
gen monthly = tm(1989m1)+_n-1
format monthly %tm
tsset monthly
*gen monthly = tm(1989m1)+_n-1: Creates a time variable monthly, beginning from January 1989 and incrementing by one for each observation.
*format monthly %tm: Formats monthly as a time-series variable displayed in a monthly format.
*tsset monthly: Declares monthly as the time variable for time-series analysis in Stata.


*Restricting Sample Period for Plotting
twoway (tsline unleaded diesel in 261/321), ytitle(Price of Unleaded Petrol and ///
Diesel) ttitle(Month) /// 
title(Price of Unleaded Petrol and Diesel Sept 2010 to Sept 2015)

* Creating Logarithmic Transformations of Variables
gen lnunleaded = log(unleaded)
gen lndiesel = log(diesel)
gen lncrude = log(crude)
*Log transformations help stabilize variance and allow interpretation of percentage changes

*The comments summarize findings from Workshop 5, noting that lnunleaded and lndiesel were found to be cointegrated, while lnunleaded and lncrude were not. This information guides the subsequent analysis of Granger causality.
*Cointegration Model for lnunleaded and lndiesel
regress lnunleaded lndiesel in 261/321
predict resa in 261/321, residuals
*regress lnunleaded lndiesel in 261/321: Runs a cointegration regression of lnunleaded on lndiesel over observations 261 to 321.
*predict resa in 261/321, residuals: Saves the residuals as resa, which represent deviations from the equilibrium relationship between lnunleaded and lndiesel. These residuals will be used in the Granger causality analysis.


*Granger Causality Test for lnunleaded and lndiesel with Lags 6 to 11
forvalues lags = 6/11 {
				eststo m`lags': regress D.lnunleaded L(1/`lags').D.lnunleaded L(1/`lags').D.lndiesel L.resa in 261/321
				}
				esttab m6 m7 m8 m9 m10 m11


forvalues lags = 1/5 {
				eststo m`lags': regress D.lnunleaded L(1/`lags').D.lnunleaded L(1/`lags').D.lndiesel L.resa in 261/321
				}
				esttab m1 m2 m3 m4 m5
*Allows comparison across different lag structures	

*Testing for Optimal Lag Length (Granger Causality)
regress    D.lnunleaded L(1/9).D.lnunleaded L(1/9).D.lndiesel L.resa in 261/321
testparm L(1/9).D.lndiesel L.resa 
 
*Reverse Granger Causality Test (with lndiesel as Dependent Variable)
regress lndiesel lnunleaded in 261/321
predict resa1 in 261/321, residuals

*Reverse Granger Causality Test with Lags 6 to 11
forvalues lags = 6/11 {
				eststo m`lags': regress D.lndiesel L(1/`lags').D.lnunleaded L(1/`lags').D.lndiesel L.resa1 in 261/321
				}
				esttab m6 m7 m8 m9 m10 m11


forvalues lags = 1/5 {
				eststo m`lags': regress D.lndiesel L(1/`lags').D.lnunleaded L(1/`lags').D.lndiesel L.resa1 in 261/321
				}
				esttab m1 m2 m3 m4 m5
	

Testing for Optimal Lag Length (Reverse Granger Causality)
regress    D.lndiesel L(1/9).D.lnunleaded L(1/9).D.lndiesel L.resa1 in 261/321
testparm L(1/9).D.lnunleaded L.resa1				


* Granger Causality Test for lnunleaded and lncrude with Lags 6 to 11
forvalues lags = 6/11 {
				eststo m`lags': regress D.lnunleaded L(1/`lags').D.lnunleaded L(1/`lags').D.lncrude in 260/320
				}
				esttab m6 m7 m8 m9 m10 m11


forvalues lags = 1/5 {
				eststo m`lags': regress D.lnunleaded L(1/`lags').D.lnunleaded L(1/`lags').D.lncrude in 260/320
				}
				esttab m1 m2 m3 m4 m5

*Choosing optimal lags for Granger Causality test between lnunleaded and lncrude
regress    D.lnunleaded L(1/2).D.lnunleaded L(1/2).D.lncrude in 260/320
*Regresses D.lnunleaded on its own lags (L(1/2).D.lnunleaded) and the lags of D.lncrude (L(1/2).D.lncrude) over the period August 2010 to August 2015 (observations 260 to 320).
*This specification uses 2 lags for both variables. The significance of each lag will help determine if both lags are needed for each variable.

regress    D.lnunleaded L(1/2).D.lnunleaded L.D.lncrude in 260/320				
*Regresses D.lnunleaded on 2 lags of D.lnunleaded but only one lag of D.lncrude.
*This alternative specification is used to test if including fewer lags of D.lncrude improves the model fit and significance.
				
*Performing F-Test for Chosen Lag Model
regress    D.lnunleaded L(1/2).D.lnunleaded L(1/2).D.lncrude in 260/320
testparm L(1/2).D.lncrude 
*Runs the Granger causality test with 2 lags of both D.lnunleaded and D.lncrude.
*testparm L(1/2).D.lncrude: Conducts an F-test to jointly test the significance of the lags of D.lncrude to see if they Granger-cause lnunleaded.


*Reverse Relationship: Testing if lnunleaded Granger-Causes lncrude
forvalues lags = 6/11 {
				eststo m`lags': regress D.lncrude L(1/`lags').D.lnunleaded L(1/`lags').D.lncrude in 260/320
				}
				esttab m6 m7 m8 m9 m10 m11


forvalues lags = 1/5 {
				eststo m`lags': regress D.lncrude L(1/`lags').D.lnunleaded L(1/`lags').D.lncrude in 260/320
				}
				esttab m1 m2 m3 m4 m5
				
*Selecting Optimal Lag Length for Reverse Relationship
regress    D.lncrude L.D.lnunleaded L.D.lncrude in 260/320
testparm L.D.lnunleaded 
*Regresses D.lncrude on one lag of D.lnunleaded and one lag of D.lncrude, which is identified as the optimal lag structure.
*testparm L.D.lnunleaded: Conducts an F-test to test the joint significance of L.D.lnunleaded, verifying if lnunleaded Granger-causes lncrude

				




				


